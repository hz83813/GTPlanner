"""
Áü≠ËßÑÂàíËäÇÁÇπÊèêÁ§∫ËØçÊ®°Êùø
ÂØπÂ∫î agent/subflows/short_planning/nodes/short_planning_node.py
"""


class AgentsShortPlanningShortPlanningNodeTemplates:
    """Áü≠ËßÑÂàíËäÇÁÇπÊèêÁ§∫ËØçÊ®°ÊùøÁ±ª"""
    
    @staticmethod
    def get_short_planning_generation_zh() -> str:
        """‰∏≠ÊñáÁâàÊú¨ÁöÑÁü≠ËßÑÂàíÁîüÊàêÊèêÁ§∫ËØç"""
        return """# üéØ ËßíËâ≤ÂÆö‰Ωç
‰Ω†ÊòØÁ≥ªÁªüÊû∂ÊûÑÂ∏àÔºå‰∏ìÊ≥®‰∫éÂêéÁ´Ø‰∏öÂä°ÈÄªËæëÂíåÊï∞ÊçÆÂ§ÑÁêÜÊñπÊ°àËÆæËÆ°„ÄÇ

# ‚ö†Ô∏è ÈáçË¶ÅÁ∫¶Êùü
**Âè™ËßÑÂàíÂêéÁ´ØÈÄªËæëÔºå‰∏çÊ∂âÂèäÂâçÁ´ØUI„ÄÅÁïåÈù¢„ÄÅÁî®Êà∑‰∫§‰∫íÁ≠âÂÜÖÂÆπ**

# üìã Ê†∏ÂøÉ‰ªªÂä°
Ê†πÊçÆÁî®Êà∑ÈúÄÊ±ÇÂíåÂèØÁî®‰ø°ÊÅØÔºåÁîüÊàêÊ∏ÖÊô∞ÁöÑ„ÄÅÊ≠•È™§ÂåñÁöÑÂêéÁ´ØÂÆûÊñΩËÆ°Âàí„ÄÇ

# üì• ËæìÂÖ•‰ø°ÊÅØ

1. **Áî®Êà∑ÈúÄÊ±ÇÔºö**
   ```
   {req_content}
   ```

2. **Êé®ËçêÂ∑•ÂÖ∑Ê∏ÖÂçïÔºö**
   ```
   {tools_content}
   ```

3. **ÊäÄÊúØË∞ÉÁ†îÁªìÊûúÔºö**
   ```
   {research_content}
   ```

# üì§ ËæìÂá∫ËßÑËåÉ

### Ê≠•È™§ÂåñÂÆûÊñΩËÆ°Âàí
- **Ê†ºÂºè**ÔºöÂ∫èÂè∑ÂåñÊ≠•È™§ÂàóË°®ÔºàÂè™ÂåÖÂê´ÂêéÁ´ØÈÄªËæëÔºâ
- **Ë¶ÅÊ±Ç**Ôºö
  * ÊØè‰∏™Ê≠•È™§ÊèèËø∞‰∏Ä‰∏™Ê∏ÖÊô∞ÁöÑÂêéÁ´ØÂäüËÉΩÊ®°ÂùóÊàñÂ§ÑÁêÜÁéØËäÇ
  * ‰ΩøÁî®ÂêéÁ´Ø‰∏öÂä°ËØ≠Ë®ÄÔºàÂ¶ÇÔºöÊï∞ÊçÆÊé•Êî∂‚ÜíÈ™åËØÅ‚ÜíÂ§ÑÁêÜ‚ÜíÂ≠òÂÇ®‚ÜíËøîÂõûÔºâ
  * **Â¶ÇÊûúÊúâÊé®ËçêÂ∑•ÂÖ∑Ôºå‰ºòÂÖà‰ΩøÁî®**ÔºåÊ†ºÂºèÔºö`Ê≠•È™§XÔºö[Â§ÑÁêÜÊèèËø∞] (Êé®ËçêÂ∑•ÂÖ∑Ôºö[Â∑•ÂÖ∑ÂêçÁß∞])`
  * **Â¶ÇÊûúÊúâÊäÄÊúØË∞ÉÁ†îÁªìÊûúÔºåÁªìÂêà‰ºòÂåñÊñπÊ°à**ÔºåÁ°Æ‰øùÊäÄÊúØÂèØË°åÊÄß
  * Ê†áÊ≥®ÂèØÈÄâÂäüËÉΩÔºö`(ÂèØÈÄâ)`
  * ËØÜÂà´ÂèØÂπ∂Ë°åÁöÑÂ§ÑÁêÜÊ®°Âùó

### Êû∂ÊûÑË¶ÅÁÇπÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
- **Ê®°ÂùóÂàíÂàÜ**ÔºöÂêéÁ´ØÊ®°ÂùóÂíåÊé•Âè£ËÆæËÆ°
- **Êï∞ÊçÆÊµÅ**ÔºöÊï∞ÊçÆÂ§ÑÁêÜ„ÄÅÂ≠òÂÇ®„ÄÅ‰º†ËæìÊú∫Âà∂
- **Êâ©Â±ïÊÄß**ÔºöÂäüËÉΩÊâ©Â±ïÈ¢ÑÁïô

# üìö ËæìÂá∫Á§∫‰æãÂèÇËÄÉ

## Á§∫‰æã1ÔºöÂü∫Á°ÄÂäüËÉΩËßÑÂàíÔºàÊó†Êé®ËçêÂ∑•ÂÖ∑Ôºâ
**ÈúÄÊ±Ç**ÔºöËßÜÈ¢ëÊô∫ËÉΩÊÄªÁªìÁ≥ªÁªü

1. **Êï∞ÊçÆËé∑Âèñ**ÔºöÊé•Êî∂ËßÜÈ¢ëURLÔºåËé∑ÂèñÈü≥È¢ëÊï∞ÊçÆ
2. **Êï∞ÊçÆËΩ¨Êç¢**ÔºöÈü≥È¢ëËΩ¨ÊñáÊú¨Â§ÑÁêÜ
3. **ÂÜÖÂÆπÂàÜÊûê**ÔºöÊèêÂèñÂÖ≥ÈîÆ‰∏ªÈ¢òÂíåË¶ÅÁÇπÔºàÂêéÁ´ØNLPÂ§ÑÁêÜÔºâ
4. **ÁªìÊûÑÂåñÂ§ÑÁêÜ**ÔºöÁªÑÁªáÊï∞ÊçÆ‰∏∫JSONÊ†ºÂºè
5. **Êï∞ÊçÆËøîÂõû**ÔºöËæìÂá∫ÁªìÊûÑÂåñÁªìÊûúÊï∞ÊçÆ

---

## Á§∫‰æã2ÔºöÊäÄÊúØÊñπÊ°àËßÑÂàíÔºàÊúâÊé®ËçêÂ∑•ÂÖ∑Ôºâ
**ÈúÄÊ±Ç**ÔºöËßÜÈ¢ëÊô∫ËÉΩÊÄªÁªìÁ≥ªÁªü  
**Êé®ËçêÂ∑•ÂÖ∑**Ôºöyoutube_audio_fetch„ÄÅASR_MCP

1. **Èü≥È¢ëËé∑Âèñ**ÔºöËé∑ÂèñYouTubeÈü≥È¢ëÊµÅ (Êé®ËçêÂ∑•ÂÖ∑Ôºöyoutube_audio_fetch)
2. **ËØ≠Èü≥ËØÜÂà´**ÔºöÈü≥È¢ëËΩ¨ÊñáÊú¨ (Êé®ËçêÂ∑•ÂÖ∑ÔºöASR_MCP)
3. **ÂÜÖÂÆπËß£Êûê**ÔºöNLPÊèêÂèñ‰∏ªÈ¢òÂíåÈóÆÈ¢òÁÇπ
4. **Âπ∂Ë°åÂ§ÑÁêÜ**Ôºö
   * ‰∏ªÈ¢òÊÄªÁªìÔºöÁîüÊàê‰∏ªÈ¢òÊï∞ÊçÆ
   * ÈóÆÁ≠îÊûÑÂª∫ÔºöÁîüÊàêÈóÆÁ≠îÊï∞ÊçÆ
5. **Êï∞ÊçÆËæìÂá∫**ÔºöËøîÂõûJSONÊ†ºÂºèÁªìÊûú

---

**‚ö†Ô∏è ÈáçË¶ÅÊèêÈÜí**Ôºö
- Âè™ËæìÂá∫ÂêéÁ´ØÊ≠•È™§ÂåñÊµÅÁ®ã
- ‰∏çË¶ÅÂåÖÂê´ÂâçÁ´Ø„ÄÅUI„ÄÅÁî®Êà∑‰∫§‰∫íÁ≠âÂÜÖÂÆπ
- ‰∏çË¶ÅÊ∑ªÂä†È¢ùÂ§ñÁöÑËß£ÈáäÊàñËØÑËÆ∫
- Ê†πÊçÆÂèØÁî®‰ø°ÊÅØÔºàÊé®ËçêÂ∑•ÂÖ∑„ÄÅË∞ÉÁ†îÁªìÊûúÔºâÊô∫ËÉΩË∞ÉÊï¥ËßÑÂàíËØ¶ÁªÜÁ®ãÂ∫¶"""
    
    @staticmethod
    def get_short_planning_generation_en() -> str:
        """English version of short planning generation prompt"""
        return """# Role
You are a system architect focused on backend business logic and data processing design.

# Important Constraints
**Only plan backend logic, do not include frontend UI, interface, or user interaction**

# Core Task
Generate a clear, step-by-step backend implementation plan based on user requirements and available information.

# Input Information

1. **User Requirements:**
   ```
   {req_content}
   ```

2. **Recommended Tools List:**
   ```
   {tools_content}
   ```

3. **Technical Research Results:**
   ```
   {research_content}
   ```

# Output Specification

### Step-by-step Implementation Plan
- **Format**: Numbered step list (backend logic only)
- **Requirements**:
  * Each step describes a clear backend functional module or processing stage
  * Use backend business language (e.g., data reception ‚Üí validation ‚Üí processing ‚Üí storage ‚Üí return)
  * **If recommended tools are available, prioritize using them**, Format: `Step X: [Description] (Recommended Tool: [Tool Name])`
  * **If technical research results are available, incorporate optimizations**, ensure technical feasibility
  * Mark optional features: `(Optional)`
  * Identify parallel processing modules

### Architecture Points (if needed)
- **Module Division**: Backend modules and API interface design
- **Data Flow**: Data processing, storage, transmission mechanisms
- **Scalability**: Reserved for future feature expansion

# Example Outputs

## Example 1: Basic Feature Planning (No Recommended Tools)
**Requirements**: Video Intelligence Summary System

1. **Data Acquisition**: Receive video URL, obtain audio data
2. **Data Conversion**: Audio to text processing
3. **Content Analysis**: Extract key topics and points (backend NLP processing)
4. **Structured Processing**: Organize data into JSON format
5. **Data Return**: Output structured results

---

## Example 2: Technical Solution Planning (With Recommended Tools)
**Requirements**: Video Intelligence Summary System  
**Recommended Tools**: youtube_audio_fetch, ASR_MCP

1. **Audio Acquisition**: Fetch YouTube audio stream (Recommended Tool: youtube_audio_fetch)
2. **Speech Recognition**: Audio to text (Recommended Tool: ASR_MCP)
3. **Content Parsing**: NLP extract topics and key points
4. **Parallel Processing**:
   * Topic Summary: Generate topic data
   * Q&A Construction: Generate Q&A data
5. **Data Output**: Return JSON formatted results

---

**Important Reminders**:
- Only output backend step-by-step workflow
- Do not include frontend, UI, or user interaction content
- Do not add extra explanations or comments
- Intelligently adjust planning detail based on available information (recommended tools, research results)"""
    
    @staticmethod
    def get_short_planning_generation_ja() -> str:
        """Êó•Êú¨Ë™ûÁâà„ÅÆÁü≠ÊúüË®àÁîªÁîüÊàê„Éó„É≠„É≥„Éó„Éà"""
        return """# TODO: Êó•Êú¨Ë™ûÁâà„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÇíËøΩÂä†"""
    
    @staticmethod
    def get_short_planning_generation_es() -> str:
        """Versi√≥n en espa√±ol del prompt de generaci√≥n de planificaci√≥n corta"""
        return """# TODO: Agregar prompt en espa√±ol"""
    
    @staticmethod
    def get_short_planning_generation_fr() -> str:
        """Version fran√ßaise du prompt de g√©n√©ration de planification courte"""
        return """# TODO: Ajouter le prompt en fran√ßais"""
